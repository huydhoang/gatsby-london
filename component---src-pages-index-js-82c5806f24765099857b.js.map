{"version":3,"sources":["webpack://gatsby-notion-ghpages/./src/components/postCard.js","webpack://gatsby-notion-ghpages/./src/pages/index.js"],"names":["props","className","count","postClass","node","frontmatter","thumbnail","style","backgroundImage","getSrc","childImageSharp","gatsbyImageData","Link","to","fields","slug","title","BlogIndex","location","data","siteTitle","site","siteMetadata","posts","allMarkdownRemark","edges","postCounter","keywords","description","map","key","StaticQuery","query","render"],"mappings":"sOA8BA,EA1BiB,SAACA,GAAD,OACf,2BACEC,UAAS,cAAeD,EAAME,MAAQ,GAAM,GAApB,mBAAf,IACPF,EAAMG,UADC,KAELH,EAAMI,KAAKC,YAAYC,UAAvB,yBACJC,MACEP,EAAMI,KAAKC,YAAYC,WAAa,CAClCE,gBAAgB,QACdC,OACET,EAAMI,KAAKC,YAAYC,UAAUI,gBAAgBC,iBAFtC,MASnB,gBAAC,EAAAC,KAAD,CAAMC,GAAIb,EAAMI,KAAKU,OAAOC,KAAMd,UAAU,kBAC1C,uBAAKA,UAAU,qBACb,sBAAIA,UAAU,mBACXD,EAAMI,KAAKC,YAAYW,OAAShB,EAAMI,KAAKU,OAAOC,UCZvDE,EAAY,SAAC,EAAUC,GAAc,IAAtBC,EAAqB,EAArBA,KACbC,EAAYD,EAAKE,KAAKC,aAAaN,MACnCO,EAAQJ,EAAKK,kBAAkBC,MACjCC,EAAc,EAElB,OACE,gBAAC,IAAD,CAAQV,MAAOI,GACb,gBAAC,IAAD,CACEJ,MAAM,YACNW,SAAU,CAAC,OAAD,iCAGXR,EAAKE,KAAKC,aAAaM,aACtB,0BAAQ3B,UAAU,aAChB,sBAAIA,UAAU,mBACXkB,EAAKE,KAAKC,aAAaM,cAI9B,uBAAK3B,UAAU,aACZsB,EAAMM,KAAI,YAAe,IAAZzB,EAAW,EAAXA,KAEZ,OADAsB,IAEE,gBAAC,EAAD,CACEI,IAAK1B,EAAKU,OAAOC,KACjBb,MAAOwB,EACPtB,KAAMA,EACND,UAAS,eAiDvB,EATc,SAACH,GAAD,OACZ,gBAAC,EAAA+B,YAAD,CACEC,MAjCY,aAkCZC,OAAQ,SAACd,GAAD,OACN,gBAACF,EAAD,eAAWC,SAAUlB,EAAMkB,SAAUlB,OAAK,EAACmB,KAAMA,GAAUnB","file":"component---src-pages-index-js-82c5806f24765099857b.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\nimport { getSrc } from 'gatsby-plugin-image';\n\nconst PostCard = (props) => (\n  <article\n    className={`post-card ${props.count % 3 === 0 && `post-card-large`} ${\n      props.postClass\n    } ${props.node.frontmatter.thumbnail ? `with-image` : `no-image`}`}\n    style={\n      props.node.frontmatter.thumbnail && {\n        backgroundImage: `url(${\n          getSrc(\n            props.node.frontmatter.thumbnail.childImageSharp.gatsbyImageData\n          )\n          // props.node.frontmatter.thumbnail.childImageSharp.gatsbyImageData.src\n        })`,\n      }\n    }\n  >\n    <Link to={props.node.fields.slug} className=\"post-card-link\">\n      <div className=\"post-card-content\">\n        <h2 className=\"post-card-title\">\n          {props.node.frontmatter.title || props.node.fields.slug}\n        </h2>\n      </div>\n    </Link>\n  </article>\n);\n\nexport default PostCard;\n","import React from 'react';\nimport { graphql, StaticQuery } from 'gatsby';\n\nimport Layout from '../components/layout';\nimport Seo from '../components/seo';\nimport PostCard from '../components/postCard';\n\n// import \"../utils/global.scss\"\nimport '../utils/normalize.css';\nimport '../utils/css/screen.css';\n//TODO: switch to staticQuery, get rid of comments, remove unnecessary components, export as draft template\nconst BlogIndex = ({ data }, location) => {\n  const siteTitle = data.site.siteMetadata.title;\n  const posts = data.allMarkdownRemark.edges;\n  let postCounter = 0;\n\n  return (\n    <Layout title={siteTitle}>\n      <Seo\n        title=\"All posts\"\n        keywords={[`blog`, `gatsby`, `javascript`, `react`]}\n      />\n      {/* <Bio /> */}\n      {data.site.siteMetadata.description && (\n        <header className=\"page-head\">\n          <h2 className=\"page-head-title\">\n            {data.site.siteMetadata.description}\n          </h2>\n        </header>\n      )}\n      <div className=\"post-feed\">\n        {posts.map(({ node }) => {\n          postCounter++;\n          return (\n            <PostCard\n              key={node.fields.slug}\n              count={postCounter}\n              node={node}\n              postClass={`post`}\n            />\n          );\n        })}\n      </div>\n    </Layout>\n  );\n};\n\nconst indexQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData(layout: FULL_WIDTH)\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst Index = (props) => (\n  <StaticQuery\n    query={indexQuery}\n    render={(data) => (\n      <BlogIndex location={props.location} props data={data} {...props} />\n    )}\n  />\n);\n\nexport default Index;\n"],"sourceRoot":""}